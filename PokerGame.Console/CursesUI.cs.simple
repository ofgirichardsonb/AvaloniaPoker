using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Mindmagma.Curses;
using PokerGame.Core.Game;
using PokerGame.Core.Interfaces;
using PokerGame.Core.Models;

namespace PokerGame.Console
{
    /// <summary>
    /// A simple NCurses-based UI for the poker game
    /// </summary>
    public class CursesUI : IPokerGameUI, IDisposable
    {
        private readonly int _maxPlayers = 8;
        private bool _initialized;
        private CancellationTokenSource _cancelSource;
        private PokerGameEngine _gameEngine = null!;
        
        // NCurses resources
        private IntPtr _mainWindow;
        private IntPtr _tableWindow;
        private IntPtr _statusWindow;
        
        // Constants for layout
        private int _screenWidth;
        private int _screenHeight;
        
        public CursesUI()
        {
            _cancelSource = new CancellationTokenSource();
        }
        
        /// <summary>
        /// Sets the game engine reference for this UI
        /// </summary>
        public void SetGameEngine(PokerGameEngine gameEngine)
        {
            _gameEngine = gameEngine;
        }
        
        /// <summary>
        /// Starts the game UI and application flow
        /// </summary>
        public void StartGame()
        {
            if (_gameEngine == null)
                throw new InvalidOperationException("Game engine not set");
                
            try
            {
                // Temporarily use standard console for setup
                System.Console.WriteLine("Starting with enhanced UI...");
                
                // Get number of players and initialize game
                System.Console.Write("Enter number of players (2-8): ");
                string? input = System.Console.ReadLine();
                
                if (!int.TryParse(input, out int numPlayers) || numPlayers < 2 || numPlayers > _maxPlayers)
                {
                    System.Console.WriteLine($"Invalid number of players. Using default (4).");
                    numPlayers = 4;
                }
                
                // Initialize players
                var players = new List<Player>();
                for (int i = 0; i < numPlayers; i++)
                {
                    System.Console.Write($"Enter name for player {i+1} (or press Enter for 'Player {i+1}'): ");
                    string name = System.Console.ReadLine() ?? "";
                    if (string.IsNullOrWhiteSpace(name))
                        name = $"Player {i+1}";
                        
                    players.Add(new Player(name, 1000)); // Start with 1000 chips
                }
                
                // Initialize game
                _gameEngine.InitializeGame(players);
                
                // Initialize NCurses UI
                Initialize();
                
                if (!_initialized)
                {
                    System.Console.WriteLine("Enhanced UI (NCurses) is still in development.");
                    System.Console.WriteLine("Using simplified console UI for now...");
                    System.Console.WriteLine("=============================================");
                    System.Console.WriteLine("    TEXAS HOLD'EM POKER GAME (CONSOLE UI)   ");
                    System.Console.WriteLine("=============================================");
                    
                    // Game loop - non-NCurses fallback
                    while (!_cancelSource.Token.IsCancellationRequested && _gameEngine.Players.Count(p => p.Chips > 0) > 1)
                    {
                        _gameEngine.StartNewHand();
                    }
                    
                    System.Console.WriteLine("Game over!");
                    var winner = _gameEngine.Players.OrderByDescending(p => p.Chips).First();
                    System.Console.WriteLine($"{winner.Name} wins the game with {winner.Chips} chips!");
                    return;
                }
                
                // Game loop with NCurses
                while (!_cancelSource.Token.IsCancellationRequested && _gameEngine.Players.Count(p => p.Chips > 0) > 1)
                {
                    _gameEngine.StartNewHand();
                }
                
                ShowMessage("Game over!");
                
                var winner = _gameEngine.Players.OrderByDescending(p => p.Chips).First();
                NCurses.Move(_screenHeight / 2, (_screenWidth - 40) / 2);
                NCurses.AddString($"Game over! {winner.Name} wins with {winner.Chips} chips!");
                
                NCurses.Refresh();
                NCurses.GetChar(); // Wait for key press
                
                // Clean up NCurses
                NCurses.EndWin();
            }
            catch (Exception ex)
            {
                if (_initialized)
                {
                    // Clean up NCurses to restore terminal
                    NCurses.EndWin();
                }
                
                System.Console.WriteLine($"Error in game: {ex.Message}");
                System.Console.WriteLine(ex.StackTrace);
            }
        }
        
        /// <summary>
        /// Initialize the NCurses UI
        /// </summary>
        public void Initialize()
        {
            try
            {
                // Initialize NCurses library
                _mainWindow = NCurses.InitScreen();
                if (_mainWindow == IntPtr.Zero)
                {
                    System.Console.WriteLine("Failed to initialize NCurses. Using simplified console UI.");
                    return;
                }
                
                // Basic NCurses setup
                NCurses.Raw();              // Disable line buffering
                NCurses.Keypad(_mainWindow, true); // Enable keypad for special keys
                NCurses.NoEcho();           // Don't echo keyboard input
                NCurses.SetCursor(CursesCursorState.Invisible); // Hide cursor
                
                // Check for color support
                if (NCurses.HasColors())
                {
                    NCurses.StartColor();
                    
                    // Initialize color pairs
                    NCurses.InitPair(1, CursesColor.Red, CursesColor.Black);
                    NCurses.InitPair(2, CursesColor.White, CursesColor.Black);
                    NCurses.InitPair(3, CursesColor.Green, CursesColor.Black);
                    NCurses.InitPair(4, CursesColor.Black, CursesColor.White);
                    NCurses.InitPair(5, CursesColor.Yellow, CursesColor.Blue);
                }
                
                // Get screen dimensions
                _screenWidth = NCurses.Columns;
                _screenHeight = NCurses.Lines;
                
                // Create windows
                _tableWindow = NCurses.NewWindow(15, _screenWidth - 2, 1, 1);
                _statusWindow = NCurses.NewWindow(3, _screenWidth - 2, _screenHeight - 4, 1);
                
                // Draw initial layout
                DrawLayout();
                
                _initialized = true;
            }
            catch (Exception ex)
            {
                System.Console.WriteLine($"Failed to initialize enhanced UI: {ex.Message}");
                System.Console.WriteLine(ex.StackTrace);
                
                // Try to clean up NCurses if something went wrong
                try { NCurses.EndWin(); } catch { }
            }
        }
        
        /// <summary>
        /// Draws the basic layout
        /// </summary>
        private void DrawLayout()
        {
            // Title
            NCurses.AttributeOn(CursesAttribute.Bold);
            NCurses.Move(0, (_screenWidth - 40) / 2);
            NCurses.AddString("♣ ♦ ♥ ♠  TEXAS HOLD'EM POKER  ♠ ♥ ♦ ♣");
            NCurses.AttributeOff(CursesAttribute.Bold);
            
            // Table window
            NCurses.Box(_tableWindow, 0, 0);
            NCurses.WindowAttributeOn(_tableWindow, CursesAttribute.Bold);
            NCurses.MoveWindow(_tableWindow, 0, 2);
            NCurses.WindowAddString(_tableWindow, " Poker Table ");
            NCurses.WindowAttributeOff(_tableWindow, CursesAttribute.Bold);
            NCurses.WindowRefresh(_tableWindow);
            
            // Status window
            NCurses.Box(_statusWindow, 0, 0);
            NCurses.WindowAttributeOn(_statusWindow, CursesAttribute.Bold);
            NCurses.MoveWindow(_statusWindow, 0, 2);
            NCurses.WindowAddString(_statusWindow, " Status ");
            NCurses.WindowAttributeOff(_statusWindow, CursesAttribute.Bold);
            NCurses.WindowBackground(_statusWindow, NCurses.ColorPair(5));
            NCurses.WindowRefresh(_statusWindow);
            
            // Refresh main window
            NCurses.Refresh();
        }
        
        /// <summary>
        /// Shows a message to the user
        /// </summary>
        public void ShowMessage(string message)
        {
            if (!_initialized)
            {
                // Fallback to standard console
                System.Console.WriteLine(message);
                return;
            }
            
            // Clear previous message
            NCurses.WindowClear(_statusWindow);
            NCurses.Box(_statusWindow, 0, 0);
            NCurses.MoveWindow(_statusWindow, 0, 2);
            NCurses.WindowAddString(_statusWindow, " Status ");
            
            // Display new message
            NCurses.MoveWindow(_statusWindow, 1, 2);
            NCurses.WindowAddString(_statusWindow, message);
            NCurses.WindowRefresh(_statusWindow);
        }
        
        /// <summary>
        /// Gets the ante amount from the user
        /// </summary>
        public int GetAnteAmount()
        {
            try
            {
                if (!_initialized)
                {
                    // Fallback to standard console
                    System.Console.Write("Enter ante amount: $");
                    string? input = System.Console.ReadLine();
                    
                    if (!int.TryParse(input, out int ante) || ante < 1)
                    {
                        System.Console.WriteLine("Invalid ante amount. Using default ($10).");
                        return 10;
                    }
                    
                    return ante;
                }
                
                ShowMessage("Enter ante amount: $");
                
                // Enable echo for input
                NCurses.Echo();
                
                // Input buffer
                char[] buffer = new char[10];
                
                // Get input
                NCurses.Move(_screenHeight - 2, 20);
                NCurses.GetString(buffer, buffer.Length);
                
                // Disable echo again
                NCurses.NoEcho();
                
                string input = new string(buffer).TrimEnd('\0');
                
                if (!int.TryParse(input, out int ante) || ante < 1)
                {
                    ShowMessage("Invalid ante amount. Using default ($10).");
                    return 10;
                }
                
                return ante;
            }
            catch (Exception ex)
            {
                ShowMessage($"Error getting ante: {ex.Message}");
                return 10; // Default
            }
        }
        
        /// <summary>
        /// Gets the player's action for their turn
        /// </summary>
        public void GetPlayerAction(Player player, PokerGameEngine gameEngine)
        {
            if (!_initialized)
            {
                // Simple console fallback
                System.Console.WriteLine();
                System.Console.WriteLine($"--- {player.Name}'s turn ---");
                
                if (player.HoleCards.Count == 2)
                {
                    System.Console.WriteLine($"Your cards: {FormatCards(player.HoleCards)}");
                }
                
                bool validAction = false;
                while (!validAction)
                {
                    // Determine what actions are allowed
                    bool canCheck = gameEngine.CurrentBet == 0 || player.CurrentBet == gameEngine.CurrentBet;
                    int callAmount = gameEngine.CurrentBet - player.CurrentBet;
                    
                    System.Console.WriteLine("Available actions:");
                    System.Console.WriteLine("F - Fold");
                    
                    if (canCheck)
                        System.Console.WriteLine("C - Check");
                    else
                        System.Console.WriteLine($"C - Call (${callAmount})");
                        
                    System.Console.WriteLine("R - Raise");
                    
                    System.Console.Write("Enter action: ");
                    string actionText = (System.Console.ReadLine() ?? "").ToUpper();
                    
                    if (actionText == "F")
                    {
                        // Fold
                        gameEngine.ProcessPlayerAction("fold");
                        validAction = true;
                    }
                    else if (actionText == "C")
                    {
                        // Check or Call
                        if (canCheck)
                            gameEngine.ProcessPlayerAction("check");
                        else
                            gameEngine.ProcessPlayerAction("call");
                        validAction = true;
                    }
                    else if (actionText == "R")
                    {
                        // Raise - get the amount
                        System.Console.Write("Enter raise amount: $");
                        string raiseInput = System.Console.ReadLine() ?? "";
                        
                        if (int.TryParse(raiseInput, out int raiseAmount) && raiseAmount > 0)
                        {
                            gameEngine.ProcessPlayerAction("raise", raiseAmount);
                            validAction = true;
                        }
                        else
                        {
                            System.Console.WriteLine("Invalid amount! Try again.");
                        }
                    }
                    else
                    {
                        System.Console.WriteLine("Invalid action! Try again.");
                    }
                }
                
                return;
            }
            
            try
            {
                // Update UI with player's turn
                ShowMessage($"{player.Name}'s turn");
                
                // Display player cards
                NCurses.MoveWindow(_tableWindow, 10, 2);
                NCurses.WindowAddString(_tableWindow, $"Your cards: {FormatCards(player.HoleCards)}");
                
                // Determine what actions are allowed
                bool canCheck = gameEngine.CurrentBet == 0 || player.CurrentBet == gameEngine.CurrentBet;
                int callAmount = gameEngine.CurrentBet - player.CurrentBet;
                
                // Display action options
                NCurses.Move(_screenHeight - 6, 2);
                NCurses.AddString("Available actions:");
                NCurses.Move(_screenHeight - 5, 4);
                NCurses.AddString("[F] - Fold");
                
                if (canCheck)
                {
                    NCurses.Move(_screenHeight - 5, 20);
                    NCurses.AddString("[C] - Check");
                }
                else
                {
                    NCurses.Move(_screenHeight - 5, 20);
                    NCurses.AddString($"[C] - Call (${callAmount})");
                }
                
                NCurses.Move(_screenHeight - 5, 40);
                NCurses.AddString("[R] - Raise");
                
                NCurses.Move(_screenHeight - 4, 2);
                NCurses.AddString("Enter your choice: ");
                NCurses.Refresh();
                
                bool validAction = false;
                while (!validAction)
                {
                    int key = NCurses.GetChar();
                    char action = char.ToUpper((char)key);
                    
                    if (action == 'F')
                    {
                        // Fold
                        ShowMessage($"{player.Name} folds");
                        gameEngine.ProcessPlayerAction("fold");
                        validAction = true;
                    }
                    else if (action == 'C')
                    {
                        // Check or Call
                        if (canCheck)
                        {
                            ShowMessage($"{player.Name} checks");
                            gameEngine.ProcessPlayerAction("check");
                        }
                        else
                        {
                            ShowMessage($"{player.Name} calls ${callAmount}");
                            gameEngine.ProcessPlayerAction("call");
                        }
                        validAction = true;
                    }
                    else if (action == 'R')
                    {
                        // Raise - get the amount
                        NCurses.Move(_screenHeight - 3, 2);
                        NCurses.AddString("Enter raise amount: $");
                        NCurses.Refresh();
                        
                        // Enable echo for input
                        NCurses.Echo();
                        
                        // Input buffer
                        char[] buffer = new char[10];
                        
                        // Get input
                        NCurses.Move(_screenHeight - 3, 22);
                        NCurses.GetString(buffer, buffer.Length);
                        
                        // Disable echo again
                        NCurses.NoEcho();
                        
                        string raiseInput = new string(buffer).TrimEnd('\0');
                        
                        if (int.TryParse(raiseInput, out int raiseAmount) && raiseAmount > 0)
                        {
                            ShowMessage($"{player.Name} raises ${raiseAmount}");
                            gameEngine.ProcessPlayerAction("raise", raiseAmount);
                            validAction = true;
                        }
                        else
                        {
                            ShowMessage("Invalid amount! Try again.");
                            
                            // Clear input area
                            NCurses.Move(_screenHeight - 3, 2);
                            NCurses.AddString("                                    ");
                            NCurses.Refresh();
                        }
                    }
                    else
                    {
                        ShowMessage("Invalid action! Try again.");
                    }
                }
                
                // Clear actions area
                for (int y = _screenHeight - 6; y < _screenHeight - 2; y++)
                {
                    NCurses.Move(y, 2);
                    for (int x = 0; x < _screenWidth - 4; x++)
                    {
                        NCurses.AddChar(' ');
                    }
                }
                NCurses.Refresh();
            }
            catch (Exception ex)
            {
                ShowMessage($"Error getting player action: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Updates the game state display
        /// </summary>
        public void UpdateGameState(PokerGameEngine gameEngine)
        {
            if (!_initialized)
            {
                // Simple console fallback
                System.Console.WriteLine();
                System.Console.WriteLine("=============================================");
                System.Console.WriteLine($"CURRENT STATE: {gameEngine.State}");
                
                // Show community cards
                string communityCardsText = gameEngine.CommunityCards.Count > 0 
                    ? FormatCards(gameEngine.CommunityCards) 
                    : "[None]";
                System.Console.WriteLine($"Community Cards: {communityCardsText}");
                
                // Show pot
                System.Console.WriteLine($"Pot: ${gameEngine.Pot}");
                if (gameEngine.CurrentBet > 0)
                {
                    System.Console.WriteLine($"Current bet: ${gameEngine.CurrentBet}");
                }
                System.Console.WriteLine();
                
                // Show player info
                System.Console.WriteLine("PLAYERS:");
                for (int i = 0; i < gameEngine.Players.Count; i++)
                {
                    var player = gameEngine.Players[i];
                    string status = "";
                    if (player.HasFolded) status = " (Folded)";
                    else if (player.IsAllIn) status = " (All-In)";
                    
                    System.Console.WriteLine($"- {player.Name}{status}: ${player.Chips} chips");
                }
                System.Console.WriteLine("=============================================");
                
                return;
            }
            
            try
            {
                // Clear table window
                NCurses.WindowClear(_tableWindow);
                NCurses.Box(_tableWindow, 0, 0);
                NCurses.MoveWindow(_tableWindow, 0, 2);
                NCurses.WindowAddString(_tableWindow, " Poker Table ");
                
                // Show game state
                NCurses.MoveWindow(_tableWindow, 1, (_screenWidth - 30) / 2);
                NCurses.WindowAddString(_tableWindow, $"CURRENT STATE: {gameEngine.State}");
                
                // Show community cards
                string communityCardsText = gameEngine.CommunityCards.Count > 0 
                    ? FormatCards(gameEngine.CommunityCards) 
                    : "[None]";
                NCurses.MoveWindow(_tableWindow, 3, 2);
                NCurses.WindowAddString(_tableWindow, $"Community Cards: {communityCardsText}");
                
                // Show pot
                string potInfo = $"Pot: ${gameEngine.Pot}";
                if (gameEngine.CurrentBet > 0)
                {
                    potInfo += $"  |  Current bet: ${gameEngine.CurrentBet}";
                }
                NCurses.MoveWindow(_tableWindow, 5, 2);
                NCurses.WindowAddString(_tableWindow, potInfo);
                
                // Show player info
                NCurses.MoveWindow(_tableWindow, 7, 2);
                NCurses.WindowAddString(_tableWindow, "PLAYERS:");
                
                int yPos = 8;
                for (int i = 0; i < gameEngine.Players.Count; i++)
                {
                    if (i % 2 == 0 && i > 0) yPos++;
                    
                    var player = gameEngine.Players[i];
                    string status = "";
                    if (player.HasFolded) status = " (Folded)";
                    else if (player.IsAllIn) status = " (All-In)";
                    
                    string playerInfo = $"- {player.Name}{status}: ${player.Chips} chips";
                    
                    NCurses.MoveWindow(_tableWindow, yPos, 2 + (i % 2) * 40);
                    NCurses.WindowAddString(_tableWindow, playerInfo);
                }
                
                NCurses.WindowRefresh(_tableWindow);
            }
            catch (Exception ex)
            {
                ShowMessage($"Error updating game state: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Shows the winning player(s) for the hand
        /// </summary>
        public void ShowWinner(List<Player> winners, PokerGameEngine gameEngine)
        {
            if (!_initialized)
            {
                // Simple console fallback
                System.Console.WriteLine();
                System.Console.WriteLine("*** HAND COMPLETE ***");
                
                if (winners.Count == 1)
                {
                    var winner = winners[0];
                    System.Console.WriteLine($"{winner.Name} wins the pot!");
                    if (winner.CurrentHand != null)
                    {
                        System.Console.WriteLine($"Winning hand: {winner.CurrentHand.Rank}");
                        System.Console.WriteLine($"Cards: {FormatCards(winner.CurrentHand.Cards)}");
                    }
                }
                else
                {
                    System.Console.WriteLine("Split pot between: " + string.Join(", ", winners.Select(w => w.Name)));
                    var firstWinner = winners[0];
                    if (firstWinner.CurrentHand != null)
                    {
                        System.Console.WriteLine($"Winning hand: {firstWinner.CurrentHand.Rank}");
                    }
                }
                
                System.Console.WriteLine("Press Enter to continue...");
                System.Console.ReadLine();
                
                return;
            }
            
            try
            {
                // Save the current state
                NCurses.WindowClear(_tableWindow);
                NCurses.Box(_tableWindow, 0, 0);
                
                // Header
                NCurses.WindowAttributeOn(_tableWindow, CursesAttribute.Bold);
                NCurses.MoveWindow(_tableWindow, 0, 2);
                NCurses.WindowAddString(_tableWindow, " Hand Complete ");
                NCurses.WindowAttributeOff(_tableWindow, CursesAttribute.Bold);
                
                // Winner info
                if (winners.Count == 1)
                {
                    var winner = winners[0];
                    NCurses.MoveWindow(_tableWindow, 2, 2);
                    NCurses.WindowAddString(_tableWindow, $"{winner.Name} wins the pot!");
                    
                    if (winner.CurrentHand != null)
                    {
                        NCurses.MoveWindow(_tableWindow, 3, 2);
                        NCurses.WindowAddString(_tableWindow, $"Winning hand: {winner.CurrentHand.Rank}");
                        
                        NCurses.MoveWindow(_tableWindow, 4, 2);
                        NCurses.WindowAddString(_tableWindow, $"Cards: {FormatCards(winner.CurrentHand.Cards)}");
                    }
                }
                else
                {
                    // Multiple winners (split pot)
                    NCurses.MoveWindow(_tableWindow, 2, 2);
                    NCurses.WindowAddString(_tableWindow, "Split pot between:");
                    
                    string winnerNames = string.Join(", ", winners.Select(w => w.Name));
                    NCurses.MoveWindow(_tableWindow, 3, 2);
                    NCurses.WindowAddString(_tableWindow, winnerNames);
                    
                    // Show hand type if available for first winner
                    var firstWinner = winners[0];
                    if (firstWinner.CurrentHand != null)
                    {
                        NCurses.MoveWindow(_tableWindow, 4, 2);
                        NCurses.WindowAddString(_tableWindow, $"Winning hand: {firstWinner.CurrentHand.Rank}");
                    }
                }
                
                // Footer
                NCurses.MoveWindow(_tableWindow, 6, 2);
                NCurses.WindowAddString(_tableWindow, "Press any key to continue...");
                
                NCurses.WindowRefresh(_tableWindow);
                
                // Wait for key press
                NCurses.GetChar();
            }
            catch (Exception ex)
            {
                ShowMessage($"Error showing winner: {ex.Message}");
            }
        }
        
        /// <summary>
        /// Formats a list of cards for display (for console fallback)
        /// </summary>
        private string FormatCards(IEnumerable<Card> cards)
        {
            if (cards == null || !cards.Any())
                return "";
                
            return string.Join(" ", cards.Select(card => FormatCard(card)));
        }
        
        /// <summary>
        /// Formats a single card for display (for console fallback)
        /// </summary>
        private string FormatCard(Card card)
        {
            string rank;
            switch (card.Rank)
            {
                case Rank.Ten:
                    rank = "10";
                    break;
                case Rank.Jack:
                    rank = "J";
                    break;
                case Rank.Queen:
                    rank = "Q";
                    break;
                case Rank.King:
                    rank = "K";
                    break;
                case Rank.Ace:
                    rank = "A";
                    break;
                default:
                    rank = ((int)card.Rank + 2).ToString();
                    break;
            }
            
            string suit;
            switch (card.Suit)
            {
                case Suit.Clubs:
                    suit = "♣";
                    break;
                case Suit.Diamonds:
                    suit = "♦";
                    break;
                case Suit.Hearts:
                    suit = "♥";
                    break;
                case Suit.Spades:
                    suit = "♠";
                    break;
                default:
                    suit = "?";
                    break;
            }
            
            return $"[{rank}{suit}]";
        }
        
        /// <summary>
        /// Releases resources
        /// </summary>
        public void Dispose()
        {
            _cancelSource.Cancel();
            _cancelSource.Dispose();
            
            // Clean up NCurses resources
            if (_initialized)
            {
                try
                {
                    NCurses.DeleteWindow(_tableWindow);
                    NCurses.DeleteWindow(_statusWindow);
                    NCurses.EndWin();
                }
                catch
                {
                    // Ignore errors during cleanup
                }
            }
        }
    }
}